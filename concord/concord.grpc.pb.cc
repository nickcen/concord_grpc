// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: concord.proto

#include "concord.pb.h"
#include "concord.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace msgs {

static const char* Concord_method_names[] = {
  "/msgs.Concord/Get",
  "/msgs.Concord/Set",
  "/msgs.Concord/Delete",
  "/msgs.Concord/Init",
};

std::unique_ptr< Concord::Stub> Concord::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Concord::Stub> stub(new Concord::Stub(channel));
  return stub;
}

Concord::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Get_(Concord_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Set_(Concord_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(Concord_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Init_(Concord_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Concord::Stub::Get(::grpc::ClientContext* context, const ::msgs::GetRequest& request, ::msgs::GetReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Get_, context, request, response);
}

void Concord::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::msgs::GetRequest* request, ::msgs::GetReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::msgs::GetReply>* Concord::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::msgs::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::msgs::GetReply>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::msgs::GetReply>* Concord::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::msgs::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::msgs::GetReply>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, false);
}

::grpc::Status Concord::Stub::Set(::grpc::ClientContext* context, const ::msgs::SetRequest& request, ::msgs::SetReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Set_, context, request, response);
}

void Concord::Stub::experimental_async::Set(::grpc::ClientContext* context, const ::msgs::SetRequest* request, ::msgs::SetReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::msgs::SetReply>* Concord::Stub::AsyncSetRaw(::grpc::ClientContext* context, const ::msgs::SetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::msgs::SetReply>::Create(channel_.get(), cq, rpcmethod_Set_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::msgs::SetReply>* Concord::Stub::PrepareAsyncSetRaw(::grpc::ClientContext* context, const ::msgs::SetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::msgs::SetReply>::Create(channel_.get(), cq, rpcmethod_Set_, context, request, false);
}

::grpc::Status Concord::Stub::Delete(::grpc::ClientContext* context, const ::msgs::DeleteRequest& request, ::msgs::DeleteReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void Concord::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::msgs::DeleteRequest* request, ::msgs::DeleteReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::msgs::DeleteReply>* Concord::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::msgs::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::msgs::DeleteReply>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::msgs::DeleteReply>* Concord::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::msgs::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::msgs::DeleteReply>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, false);
}

::grpc::Status Concord::Stub::Init(::grpc::ClientContext* context, const ::msgs::InitRequest& request, ::msgs::InitReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Init_, context, request, response);
}

void Concord::Stub::experimental_async::Init(::grpc::ClientContext* context, const ::msgs::InitRequest* request, ::msgs::InitReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::msgs::InitReply>* Concord::Stub::AsyncInitRaw(::grpc::ClientContext* context, const ::msgs::InitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::msgs::InitReply>::Create(channel_.get(), cq, rpcmethod_Init_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::msgs::InitReply>* Concord::Stub::PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::msgs::InitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::msgs::InitReply>::Create(channel_.get(), cq, rpcmethod_Init_, context, request, false);
}

Concord::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Concord_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Concord::Service, ::msgs::GetRequest, ::msgs::GetReply>(
          std::mem_fn(&Concord::Service::Get), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Concord_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Concord::Service, ::msgs::SetRequest, ::msgs::SetReply>(
          std::mem_fn(&Concord::Service::Set), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Concord_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Concord::Service, ::msgs::DeleteRequest, ::msgs::DeleteReply>(
          std::mem_fn(&Concord::Service::Delete), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Concord_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Concord::Service, ::msgs::InitRequest, ::msgs::InitReply>(
          std::mem_fn(&Concord::Service::Init), this)));
}

Concord::Service::~Service() {
}

::grpc::Status Concord::Service::Get(::grpc::ServerContext* context, const ::msgs::GetRequest* request, ::msgs::GetReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Concord::Service::Set(::grpc::ServerContext* context, const ::msgs::SetRequest* request, ::msgs::SetReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Concord::Service::Delete(::grpc::ServerContext* context, const ::msgs::DeleteRequest* request, ::msgs::DeleteReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Concord::Service::Init(::grpc::ServerContext* context, const ::msgs::InitRequest* request, ::msgs::InitReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace msgs

